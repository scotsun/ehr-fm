{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-23T05:34:21.902242Z", "invocation_id": "72bac59a-482e-4d81-9eec-84728d6db1e9", "invocation_started_at": "2025-10-23T05:34:19.059006Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:19.422796Z", "completed_at": "2025-10-23T05:34:19.426151Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:19.426346Z", "completed_at": "2025-10-23T05:34:19.480215Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058081865310668945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nbr.stg_admissions", "compiled": true, "compiled_code": "\n\n/*\nStaging: Admissions (\u5c31\u8bca\u4e3b\u8868)\n\n\u529f\u80fd:\n- \u8ba1\u7b97\u5c31\u8bca\u5e8f\u53f7\uff08visit_seq\uff09\n- \u8ba1\u7b97\u8ddd\u4e0a\u6b21\u5c31\u8bca\u5929\u6570\uff08days_since_prior_admission\uff09\n\n\u8f93\u51fa:\n- \u6bcf\u884c = \u4e00\u6b21\u5c31\u8bca\n- \u5305\u542b\u60a3\u8005ID\u3001\u5c31\u8bcaID\u3001\u65f6\u95f4\u7279\u5f81\n*/\n\nselect \n    subject_id,\n    hadm_id,\n    admittime,\n    dischtime,\n    -- \u8ba1\u7b97\u5c31\u8bca\u5e8f\u53f7\uff08\u6309\u60a3\u8005\u5206\u7ec4\uff0c\u6309\u5165\u9662\u65f6\u95f4\u6392\u5e8f\uff09\n    row_number() over (\n        partition by subject_id \n        order by admittime\n    ) as visit_seq,\n    \n    -- \u8ba1\u7b97\u8ddd\u4e0a\u6b21\u5c31\u8bca\u7684\u5929\u6570\uff08\u76f8\u5bf9\u65f6\u95f4\u95f4\u9694\uff09\n    cast(admittime as date) - lag(cast(admittime as date)) over (\n        partition by subject_id \n        order by admittime\n    ) as days_since_prior_admission\n\nfrom \"mimic4\".\"main\".\"raw_admissions\"\nwhere hadm_id is not null  -- \u8fc7\u6ee4\u65e0\u6548\u8bb0\u5f55", "relation_name": "\"mimic4\".\"main\".\"stg_admissions\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:19.483080Z", "completed_at": "2025-10-23T05:34:19.484321Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:19.484488Z", "completed_at": "2025-10-23T05:34:19.491981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009732961654663086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nbr.stg_diagnoses", "compiled": true, "compiled_code": "\n\n/*\nStaging: Diagnoses (\u8bca\u65ad)\n\n\u529f\u80fd:\n- \u6dfb\u52a0\u524d\u7f00 'DX:' \u533a\u5206\u8bca\u65ad\u7f16\u7801\n- \u4fdd\u7559\u539f\u59cb seq_num\uff08\u8bca\u65ad\u4f18\u5148\u7ea7\u987a\u5e8f\uff09\n- \u8bca\u65ad\u6ca1\u6709\u7cbe\u786e\u65f6\u95f4\u6233\uff08event_time=NULL\uff09\n\n\u8f93\u51fa:\n- \u6bcf\u884c = \u4e00\u4e2a\u8bca\u65ad\u7f16\u7801\n- \u5173\u8054\u5230 hadm_id\n*/\n\nselect \n    subject_id,\n    hadm_id,\n    'DX:' || icd_code as code,\n    'diagnosis' as code_type,\n    null::timestamp as event_time,  -- \u8bca\u65ad\u65e0\u7cbe\u786e\u65f6\u95f4\n    seq_num\nfrom \"mimic4\".\"main\".\"raw_diagnoses_icd\"\nwhere icd_code is not null", "relation_name": "\"mimic4\".\"main\".\"stg_diagnoses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:19.493632Z", "completed_at": "2025-10-23T05:34:19.494915Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:19.495101Z", "completed_at": "2025-10-23T05:34:19.503181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010174036026000977, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nbr.stg_medications", "compiled": true, "compiled_code": "\n\n/*\nStaging: Medications (\u7528\u836f)\n\n\u529f\u80fd:\n- \u6dfb\u52a0\u524d\u7f00 'MED:' \u533a\u5206\u836f\u7269\n- **\u4e0d\u53bb\u91cd**\uff1a\u4fdd\u7559\u6240\u6709\u7528\u836f\u8bb0\u5f55\uff08\u5305\u62ec\u91cd\u590d\u7528\u836f\uff09\n- \u6309 starttime \u6392\u5e8f\u7f16\u53f7\n\nETHOS \u7b56\u7565:\n- \u8f93\u5165(X): \u4fdd\u7559\u6240\u6709\u7528\u836f\u4e8b\u4ef6\uff0c\u5b66\u4e60\u7528\u836f\u9891\u7387\n- \u76ee\u6807(Y): \u8bad\u7ec3\u65f6\u6309 hadm_id \u53bb\u91cd\uff08\u5728 Dataset \u4e2d\u5904\u7406\uff09\n\n\u8f93\u51fa:\n- \u6bcf\u884c = \u4e00\u4e2a\u7528\u836f\u8bb0\u5f55\n- \u5305\u542b\u7cbe\u786e\u7684 starttime\uff08\u79d2\u7ea7\u65f6\u95f4\uff09\n*/\n\nselect \n    subject_id,\n    hadm_id,\n    'MED:' || drug as code,\n    'medication' as code_type,\n    starttime as event_time,  -- \u7528\u836f\u5f00\u59cb\u65f6\u95f4\uff08\u79d2\u7ea7\u7cbe\u5ea6\uff09\n    row_number() over (\n        partition by subject_id, hadm_id \n        order by starttime\n    ) as seq_num\nfrom \"mimic4\".\"main\".\"raw_prescriptions\"\nwhere drug is not null \n    and hadm_id is not null", "relation_name": "\"mimic4\".\"main\".\"stg_medications\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:19.504916Z", "completed_at": "2025-10-23T05:34:19.506510Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:19.506698Z", "completed_at": "2025-10-23T05:34:19.514828Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010504961013793945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nbr.stg_procedures", "compiled": true, "compiled_code": "\n\n/*\nStaging: Procedures (\u624b\u672f/\u64cd\u4f5c)\n\n\u529f\u80fd:\n- \u6dfb\u52a0\u524d\u7f00 'PR:' \u533a\u5206\u624b\u672f\u7f16\u7801\n- \u5c06 chartdate \u8f6c\u6362\u4e3a timestamp\uff08\u7528\u4e8e\u65f6\u95f4\u6392\u5e8f\uff09\n- \u4fdd\u7559\u539f\u59cb seq_num\n\n\u8f93\u51fa:\n- \u6bcf\u884c = \u4e00\u4e2a\u624b\u672f/\u64cd\u4f5c\u7f16\u7801\n- \u5305\u542b\u64cd\u4f5c\u65e5\u671f\uff08\u65e5\u671f\u7ea7\u522b\u7684\u65f6\u95f4\uff09\n*/\n\nselect \n    subject_id,\n    hadm_id,\n    'PR:' || icd_code as code,\n    'procedure' as code_type,\n    cast(chartdate as timestamp) as event_time,  -- \u65e5\u671f\u8f6c\u65f6\u95f4\u6233\uff0800:00:00\uff09\n    seq_num\nfrom \"mimic4\".\"main\".\"raw_procedures_icd\"\nwhere icd_code is not null\n    and hadm_id is not null", "relation_name": "\"mimic4\".\"main\".\"stg_procedures\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:19.516620Z", "completed_at": "2025-10-23T05:34:19.518250Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:19.518444Z", "completed_at": "2025-10-23T05:34:21.880253Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.3643388748168945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nbr.tokens", "compiled": true, "compiled_code": "/*\nMIMIC-IV Tokens \u6a21\u578b\n\n\u529f\u80fd\uff1a\u5c06\u591a\u4e2a\u533b\u7597\u7f16\u7801\u8868\u5408\u5e76\u4e3a\u7edf\u4e00\u7684 tokens \u8868\n\u7ed3\u6784\uff1asubject_id \u2192 hadm_id (visit) \u2192 codes\n\n\u7c7b\u6bd4 Instacart:\n- subject_id = user_id\n- hadm_id = order_id\n- code = product_id (\u4f46\u9700\u8981\u52a0\u524d\u7f00\u533a\u5206\u7c7b\u578b)\n*/\n\nwith admissions as (\n    -- \u5c31\u8bca\u4e3b\u8868\uff0c\u8ba1\u7b97\u5c31\u8bca\u5e8f\u53f7\u548c\u65f6\u95f4\u95f4\u9694\n    select \n        subject_id,\n        hadm_id,\n        admittime,\n        dischtime,\n        row_number() over (\n            partition by subject_id \n            order by admittime\n        ) as visit_seq,\n        -- \u8ba1\u7b97\u8ddd\u4e0a\u6b21\u5c31\u8bca\u7684\u5929\u6570\uff08\u7c7b\u4f3c days_since_prior_order\uff09\n        CAST(admittime AS DATE) - lag(CAST(admittime AS DATE)) over (\n            partition by subject_id \n            order by admittime\n        ) as days_since_prior_admission\n    from \"mimic4\".\"main\".\"raw_admissions\"\n    where hadm_id is not null  -- \u8fc7\u6ee4\u65e0\u6548\u8bb0\u5f55\n),\n\ndiagnoses as (\n    -- \u8bca\u65ad\u7f16\u7801\uff0c\u52a0\u524d\u7f00 \"DX:\"\n    select \n        subject_id,\n        hadm_id,\n        'DX:' || icd_code as code,\n        'diagnosis' as code_type,\n        seq_num\n    from \"mimic4\".\"main\".\"raw_diagnoses_icd\"\n    where icd_code is not null\n),\n\nmedications as (\n    -- \u836f\u7269\u7f16\u7801\uff0c\u52a0\u524d\u7f00 \"MED:\"\n    select \n        subject_id,\n        hadm_id,\n        'MED:' || drug as code,\n        'medication' as code_type,\n        row_number() over (\n            partition by subject_id, hadm_id \n            order by starttime\n        ) as seq_num\n    from \"mimic4\".\"main\".\"raw_prescriptions\"\n    where drug is not null\n),\n\nall_codes as (\n    -- \u5408\u5e76\u6240\u6709\u7f16\u7801\n    select * from diagnoses\n    union all\n    select * from medications\n)\n\n-- \u6700\u7ec8\u8f93\u51fa\uff1a\u6bcf\u884c\u4ee3\u8868\u67d0\u60a3\u8005\u67d0\u6b21\u5c31\u8bca\u7684\u67d0\u4e2a\u7f16\u7801\nselect \n    a.subject_id,\n    a.hadm_id,\n    a.admittime,\n    a.visit_seq,\n    a.days_since_prior_admission,  -- \u65f6\u95f4\u95f4\u9694\n    c.code,\n    c.code_type,\n    c.seq_num\nfrom admissions a\njoin all_codes c \n    on a.hadm_id = c.hadm_id\norder by \n    a.subject_id, \n    a.admittime, \n    c.seq_num", "relation_name": "\"mimic4\".\"main\".\"tokens\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-10-23T05:34:21.881978Z", "completed_at": "2025-10-23T05:34:21.883925Z"}, {"name": "execute", "started_at": "2025-10-23T05:34:21.884108Z", "completed_at": "2025-10-23T05:34:21.890261Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015339136123657227, "adapter_response": {}, "message": "Runtime Error in model stg_labs (models/stg/stg_labs.sql)\n  Binder Error: Could not ORDER BY column \"l.labevent_id\": add the expression/function to every SELECT, or move the UNION into a FROM clause.", "failures": null, "unique_id": "model.nbr.stg_labs", "compiled": true, "compiled_code": "\n\n/*\nStaging: Lab Events (\u68c0\u9a8c\u7ed3\u679c) - \u6700\u590d\u6742\u7684\u5904\u7406\n\n\u529f\u80fd:\n1. Top-200 \u8fc7\u6ee4\uff1a\u53ea\u4fdd\u7559\u6700\u5e38\u89c1\u7684 200 \u79cd\u68c0\u9a8c\n2. \"\u635e\u56de\"\u7b56\u7565\uff1a\u627e\u56de\u5165\u9662\u524d 24 \u5c0f\u65f6\u7684\u68c0\u9a8c\n3. \u6570\u503c\u5206\u7bb1\uff1aQ1-Q10 \u5206\u4f4d\u6570\u79bb\u6563\u5316\uff08ETHOS \u65b9\u6cd5\uff09\n\nETHOS \u7b56\u7565:\n- \u8fde\u7eed\u6570\u503c \u2192 \u79bb\u6563\u7c7b\u522b\uff08Q1-Q10\uff09\n- \u4fdd\u7559 NULL \u503c\u4f5c\u4e3a\u5355\u72ec\u7c7b\u522b\n- \u8bcd\u8868: 200 itemid \u00d7 11 \u72b6\u6001 = 2200 \u4e2a lab tokens\n\n\u8f93\u51fa:\n- \u6bcf\u884c = \u4e00\u4e2a\u68c0\u9a8c\u7ed3\u679c\uff08\u5df2\u5206\u7bb1\uff09\n- code \u683c\u5f0f: LAB:itemid_Q5\n- \u5305\u542b\u7cbe\u786e charttime\n*/\n\n-- ============================================================================\n-- Step 1: \u6269\u5c55\u68c0\u9a8c\u6570\u636e\uff08\u539f\u6709 + \u635e\u56de\uff09\n-- ============================================================================\nwith labs_extended as (\n    -- 1.1 \u539f\u672c\u6709 hadm_id \u7684\u4f4f\u9662\u68c0\u9a8c\n    select \n        subject_id,\n        hadm_id,\n        itemid,\n        charttime,\n        valuenum\n    from \"mimic4\".\"main\".\"raw_labevents\"\n    where hadm_id is not null\n        and itemid in (select itemid from \"mimic4\".\"main\".\"top_200_labs\")\n    \n    union all\n    \n    -- 1.2 \"\u635e\u56de\"\u5165\u9662\u524d 24 \u5c0f\u65f6\u7684\u68c0\u9a8c\n    -- \u7b56\u7565\uff1a\u6bcf\u4e2a\u68c0\u9a8c\u53ea\u5206\u914d\u7ed9\u65f6\u95f4\u6700\u8fd1\u7684\u4e00\u4e2a\u5c31\u8bca\n    select distinct on (l.labevent_id)\n        l.subject_id,\n        a.hadm_id,  -- \u5206\u914d hadm_id\n        l.itemid,\n        l.charttime,\n        l.valuenum\n    from \"mimic4\".\"main\".\"raw_labevents\" l\n    join \"mimic4\".\"main\".\"stg_admissions\" a \n        on l.subject_id = a.subject_id\n        and l.hadm_id is null  -- \u539f\u672c\u6ca1\u6709 hadm_id\n        and l.charttime >= (a.admittime - interval '24 hours')\n        and l.charttime <= a.admittime\n    where l.itemid in (select itemid from \"mimic4\".\"main\".\"top_200_labs\")\n    order by \n        l.labevent_id, \n        abs(extract(epoch from (l.charttime - a.admittime)))  -- \u9009\u6700\u8fd1\u7684\u5c31\u8bca\n),\n\n-- ============================================================================\n-- Step 2: \u6570\u503c\u5206\u7bb1\uff08Q1-Q10\uff09\n-- ============================================================================\nlabs_binned as (\n    select \n        l.subject_id,\n        l.hadm_id,\n        l.itemid,\n        l.charttime,\n        l.valuenum,\n        -- \u5206\u7bb1\u903b\u8f91\uff0811\u4e2a\u7c7b\u522b\uff09\n        case \n            when l.valuenum is null then 'LAB:' || l.itemid || '_NULL'\n            when l.valuenum <= q.q1 then 'LAB:' || l.itemid || '_Q1'\n            when l.valuenum <= q.q2 then 'LAB:' || l.itemid || '_Q2'\n            when l.valuenum <= q.q3 then 'LAB:' || l.itemid || '_Q3'\n            when l.valuenum <= q.q4 then 'LAB:' || l.itemid || '_Q4'\n            when l.valuenum <= q.q5 then 'LAB:' || l.itemid || '_Q5'\n            when l.valuenum <= q.q6 then 'LAB:' || l.itemid || '_Q6'\n            when l.valuenum <= q.q7 then 'LAB:' || l.itemid || '_Q7'\n            when l.valuenum <= q.q8 then 'LAB:' || l.itemid || '_Q8'\n            when l.valuenum <= q.q9 then 'LAB:' || l.itemid || '_Q9'\n            else 'LAB:' || l.itemid || '_Q10'\n        end as code\n    from labs_extended l\n    left join \"mimic4\".\"main\".\"lab_quantiles\" q \n        on l.itemid = q.itemid\n)\n\n-- ============================================================================\n-- Step 3: \u6700\u7ec8\u8f93\u51fa\n-- ============================================================================\nselect \n    subject_id,\n    hadm_id,\n    code,\n    'lab' as code_type,\n    charttime as event_time,  -- \u68c0\u9a8c\u65f6\u95f4\uff08\u79d2\u7ea7\u7cbe\u5ea6\uff09\n    row_number() over (\n        partition by subject_id, hadm_id \n        order by charttime\n    ) as seq_num\nfrom labs_binned", "relation_name": "\"mimic4\".\"main\".\"stg_labs\"", "batch_results": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.nbr.events_merged", "compiled": false, "compiled_code": null, "relation_name": "\"mimic4\".\"main\".\"events_merged\"", "batch_results": null}], "elapsed_time": 2.55653977394104, "args": {"favor_state": false, "show_resource_report": false, "log_format_file": "json", "print": true, "state_modified_compare_vars": false, "cache_selected_only": false, "require_nested_cumulative_type_params": false, "include_saved_query": false, "resource_types": [], "indirect_selection": "eager", "log_level_file": "debug", "upload_to_artifacts_ingest_api": false, "log_path": "/Users/gin/Desktop/HAT/ehr-fm/dataset/mimic4/transform/nbr/target/nbr-f693c6b-61e4a10", "warn_error_options": {"error": [], "warn": [], "silence": []}, "target_path": "target/nbr-f693c6b-61e4a10", "invocation_command": "dbt build --select fqn:*", "log_level": "info", "which": "build", "export_saved_queries": false, "vars": {}, "static_parser": true, "partial_parse_file_diff": true, "select": ["fqn:*"], "use_colors": true, "use_fast_test_edges": false, "exclude_resource_types": [], "require_batched_execution_for_custom_microbatch_strategy": false, "require_explicit_package_overrides_for_builtin_materializations": true, "introspect": true, "macro_debugging": false, "version_check": true, "exclude": [], "require_generic_test_arguments_property": true, "project_dir": "/Users/gin/Desktop/HAT/ehr-fm/dataset/mimic4/transform/nbr", "send_anonymous_usage_stats": false, "show_all_deprecations": false, "profiles_dir": "/Users/gin/Desktop/HAT/ehr-fm/dataset/mimic4/transform/nbr", "quiet": false, "printer_width": 80, "require_yaml_configuration_for_mf_time_spines": false, "log_format": "json", "state_modified_compare_more_unrendered_values": false, "log_file_max_bytes": 10485760, "empty": false, "source_freshness_run_project_hooks": true, "use_colors_file": true, "show": false, "write_json": true, "strict_mode": false, "defer": false, "partial_parse": true, "populate_cache": true, "skip_nodes_if_on_run_start_fails": false, "validate_macro_args": false, "require_all_warnings_handled_by_warn_error": false, "require_resource_names_without_spaces": true}}